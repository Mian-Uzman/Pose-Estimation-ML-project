Test Models
===========

This document describes all test models generated by
``generate_test_models.py``. The models and their artefacts are used
forunit testing the converter and its modules.
Models that contain all weights are pretrained for their respective
tasks and can be used for inference.

Models that have their weights stripped only contain constants used in
operations (e.g. Reshape sizes or constant summands, etc.). These models
cannot be used to run inference and are limited to structural information
only. All models use ``dytpe.float32`` for input and output tensors.
Inputs and outputs are described by their respective tensor shapes.

Atari Net
---------

This model is based on `Deepmind's Q-learning model for playing Atari games`__.

* **Formats:** Frozen Graph ``[json]``
* **Weights:** ``[stripped]``
* **Inputs:** ``(128, 128, 3)`` (*RGB image*)
* **Outputs:** ``(10)`` (*action indicator*)
* **Files:**
    • ``atari_net.json``

__ https://deepmind.com/research/publications/playing-atari-deep-reinforcement-learning


Simple
------

Contains a single layer perceptron that estimates ``y = 5·x``.

* **Formats:** Frozen Graph ``[proto]``, TFJS Graph Model
* **Weights:** ``[all]``
* **Inputs:** ``(1)`` (*x*)
* **Outputs:** ``(1,1)`` (*y = 5·x*)
* **Files:**
    • ``simple/frozen_graph.pb``
    • ``simple/model.json``

Prelu
-----

Dual-layer classifier that uses a PReLU activation layer to predict, whether a
point is located inside or outside a sphere given sphere centre and radius.

The sphere coordinates as well as all inputs need to be normalised to the
range [-1, 1]. Inputs are as follows

============ ================  ====
Tensor index Content           Name
============ ================  ====
0            sphere centre x   cx
------------ ----------------  ----
1            sphere centre y   cy
------------ ----------------  ----
2            sphere centre z   cz
------------ ----------------  ----
3            sphere radius     r
------------ ----------------  ----
4            sample point x    px
------------ ----------------  ----
5            sample point y    py
------------ ----------------  ----
6            sample point z    pz
============ ================  ====

The coordinates of every point contained within the sphere must also fall
into the range [-1, 1].

* **Formats:** Keras ``[HDF5]``, TFJS Graph Model
* **Weights:** ``[all]``
* **Inputs:** ``(7)`` (*cx, cy, cz, r, px, py, pz*)
* **Outputs:** ``(1,1)`` (*0 → outside; 1 → inside*)
* **Files:**
    • ``prelu/keras.h5``
    • ``prelu/model.json``

Multi-Head
----------

Multi-layer model for detecting handwritten digits (e.g. MNIST dataset).
The model has two outputs ("heads") - one for the one-hot classifier results,
and another output for the upscaled autoencoder output.

* **Formats:** Frozen Graph ``[proto]``, TFJS Graph Model
* **Weights:** ``[stripped]``
* **Inputs:** (784) (*normalised 28x28 pixel grayscale image*)
* **Output:** (10); (784) (*one-hot classifier result*; *autoencoder output*)
* **Files:**
    • ``multi_head/frozen_graph.pb``
    • ``multi_head/model.json``

Depthwise (Relu/PReLU)
----------------------

Minimalistic CNN model for image classification loosely based on VGG16.
The model is pretrained to classify 32x32 RGB images into images of
horses and humans. It uses one-hot encoded classifier outputs with
labels ["horse", "human"].

* **Formats:** Frozen Graph ``[proto]``, TFJS Graph Model
* **Weights:** ``[all]``
* **Inputs:** (32, 32, 3) (*32x32 pixel RGB image normalised to [-1,1]*)
* **Output:** (1, 2) (*one-hot classifier results*)
* **Files:**
    • ``depthwise_relu/frozen_graph.pb``
    • ``depthwise_relu/model.json``
    • ``depthwise_prelu/frozen_graph.pb``
    • ``depthwise_prelu/model.json``
